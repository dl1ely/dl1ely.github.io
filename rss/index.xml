<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Dr. Stefan Pfeiffer]]></title><description><![CDATA[All Things Programming - mostly functional!]]></description><link>http://www.stefan-pfeiffer.de</link><generator>RSS for Node</generator><lastBuildDate>Fri, 22 Jul 2016 21:09:34 GMT</lastBuildDate><atom:link href="http://www.stefan-pfeiffer.de/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Advent of Code - Halftime report]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Sometime in mid December 2015 i discovered <a href="http://adventofcode.com/">Advent of Code</a> and was immediately hooked by the nature of the programming challenges given there. You are given a problem with some simple examples that can lead your test-driven development, and a set of inputs. You have to provide the answer to the problem for the given inputs. It is only the answer that counts, not the way you achieved the solution. To discourage spoilers, there are many different set of inputs for different participants. A right answer gives you one star. After solving the first problem of every day is solved, you get access to a second, slightly modified problem with the same input. Solving this gives you a second star. There are 24 two-part problems that were published from the 1st to the 24th of December. In sum one can achieve 48 stars, 2 for each day.</p>
</div>
<div class="paragraph">
<p>I discovered the page late, but started from day 1 anyway. This looked like fun, and i wanted to train my Clojure knowledge more. Unfortunately, during the next days i only caught up only to day 9 or so, then christmas holidays were there and no free time available. Luckily, the site stayed up till now and one can still solve the problems. Despite the festive theming of the problems, this is still fun today, and so i want to continue solving the problems one after one until i have earned my 48 stars.</p>
</div>
<div class="paragraph">
<p>Being at day 12 now, halfway through, i want to elaborate on what i experienced. Some problems were rather easy to solve, but some were rather tricky and required changing the methodology for solving. My solutions are on <a href="https://github.com/dl1ely/advent-of-code">Github</a>, but they are not well documented nor polished.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_1_counting_the_parentheses">day 1 - counting the parentheses</h2>
<div class="sectionbody">
<div class="paragraph">
<p>What a nice start into the 24 problems when using a LISP. Outputting the balance of the parenthesis was very easy by using <code>frequencies</code> on the input string and subtracting the frequency of <code>)</code> from <code>(</code>. Unfortunately, for the second part of the problem, that didn&#8217;t help, i needed to abort when hitting 0. So i went for a <code>reduce</code> that printed the current index when hitting a negative sum. The first of the outputs was the first balanced parenthesis.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_2_calculating_gift_wrap_paper">day 2 - calculating gift wrap paper</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nothing special here - parsing the string input data to list values, then defining the functions that map the dimensions to areas (plus slack) and lengthes. Then reduce the values to their sums. Easy!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_3_visiting_houses">day 3 - visiting houses</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This one was also rather straightforward by keeping track of the visited houses with a hash set holding the X-Y-coordinates, and a reducing function that keeps track of the current position. After processing all arrows of the input, the number of entries in the set is the number of visited houses. The hash set ignores the already visited positions, so we do not have to handle that explicitly.</p>
</div>
<div class="paragraph">
<p>The second part of the puzzle was very elegant, too. Using <code>take-nth 2</code> on the original input twice (with an offset of one) Santa and his robot get their individual routes. Both produce a hash set of visited locations using the function from the first part of the puzzle. Then boths sets get merged using <code>clojure.set.union</code>, and again the count of set members is the number of visited houses.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_4_finding_hashes_starting_with_zeroes">day 4 - finding hashes starting with zeroes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Using Clojure Java interop (and copy-and-pasting a convenience clojure MD5 wrapper function from StackOverflow) this was also not too hard. Taking the first hash from a infinite lazy sequence of hashes that were filtered for starting zeroes did the trick.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_5_naughty_strings_and_nice_strings">day 5 - naughty strings and nice strings</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This was easily solved by defining the right predicates, combining them with <code>and</code> and filtering the input strings. The three-vowels-rule was checked by using our friend <code>frequency</code> again and adding up the vowel frequencies only, double letters were detected by partitioning the strings in pairs of two characters and checking if at least one of them had two identical ones.</p>
</div>
<div class="paragraph">
<p>The second part of the puzzle went similar. Finding the non-overlapping bigrams was done by trying to replace each bigram in the input string with an empty string and testing if the length of the resulting string differed by more than 2. If yes, another identical bigram must have been present in the string.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_6_christmas_lights">day 6 - christmas lights</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This was a harder one. At first i wanted to keep track of the lit lights in a hash set of coordinates and manipulate them by an elaborate use of <code>clojure.set.difference</code> and <code>clojure.set.union</code>. That worked fine in some test code, but due to immutability, copying the hash set again and again led to GC problems that i could not fix with JVM parameters when using the real, big data set. I resorted to using a „native” Java array that i wrote with <code>aset</code> and read with <code>aget</code>. I shot myself in the foot by forgetting about the mutability of Java arrays, but finally, all worked out. Each cells content (an int) represented a dim light when the number was even and a lit light wenn the number was odd. Changing the lights was just a matter of incrementing the cells in the right way.</p>
</div>
<div class="paragraph">
<p>Luckily, for the second part of the puzzle, the hash set would not have helped me anyway, but the array with ints was the right way to go. Implementing brightness was straightforward.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_7_wires">day 7 - wires</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This one was also a little bit tricky to get right. I parsed the text input into maps with the wire names as keys and the commands and possible operands as vector value. Then i resolved the last wire by resolving its command and propagating backwards recursively. For executing the different commands, i used a multi method that dispatched on the command name. Great gain by using Clojure! Sure enough, i hit the stack limit with the big input data set. Recursion can be bad. I circumvented that by memoizing the results of wire resolving, replacing the command associated with a wire with its resolved value to use in future computations, once its resolved value was known. Another small problem was the limitation to 16 bits unsigned, so intermediate results had to be `bit-and`ed with 0xFFFF.</p>
</div>
<div class="paragraph">
<p>The second part of the puzzle was solved by manually editing the input with the new value for wire b from part one and solving again.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_8_character_encodings">day 8 - character encodings</h2>
<div class="sectionbody">
<div class="paragraph">
<p>As always, character encodings suck. This one was hard to get right with all the edge cases. I finally did it after many unsuccessful tries with two functions using <code>recur</code> to loop over the strings, looking 2 characters ahead and doing the right things in two <code>condp</code> constructs. I was happy i made it „somehow“ and moved on…</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_9_traveling_santa_man">day 9 - traveling santa man</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The number of cities to visit was small enough to solve it brute force: Try all permutations of cities (<code>clojure.math.combinatorics</code> to the rescue!), calculate the length of the route for each, then sort for the shortest route (part 1) or the longest route (part 2). No surprises here.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_10_look_and_say">day 10 - look and say</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Two nested <code>recur</code> loops did the job of counting the consecutive digits and producing the next sequence. <code>iterate</code> made that a infinite lazy sequence from which i realized the 40th (part 1) and 50th (part 2) sequence. It was surprising how much longer it took to realize the 10 sequences between 40 and 50 than to realize the first 40 sequences. But finally, the program ended and day 10 was solved.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_11_password_policies">day 11 - password policies</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Day 11 did wear me down. I failed at producing correct „incremented“ passwords to test the conditions on. I could not get it right quickly and finally made a long break for this puzzle. One day when i tried to get my Clojure-deprived brain in balance again, i started this puzzle from scratch using <a href="http://gorilla-repl.org/">Gorilla REPL</a>, which makes for a much nicer interactive development for those small puzzles.</p>
</div>
<div class="paragraph">
<p>I still struggled to get the non-overlapping duplets of characters right, and finally resorted to a less-than-elegant solution that returned the indices of all found duplets and counts them if they are least 2 apart, thus skipping over the overlapping pairs. I am not satisfied with this solution, but it worked. After some experimenting i also got the generation of the „next“ password right and could filter an iterated list of them starting with my puzzle input to get the first valid one.</p>
</div>
<div class="paragraph">
<p>Seeing the result i realised it woult most likely have been quicker to solve that puzzle by hand on a piece of paper. But well, we are here to learn, aren&#8217;t we?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_day_12_sum_the_ints">day 12 - sum the ints</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I used <code>clojure.data.json</code> to parse the input data to a data structure and then recursively calculated the sums of the ints in the subordinate structures, flattening vectors and taking only the vals of maps along the way, branching on the type of the object i was looking at, using <code>integer?</code> for atomic values, <code>map?</code> for maps and <code>vector?</code> for vectors. If none of the predicates matches, we return 0 to skip over strings. This could have been done in a multimethod that dispatches on the type of the argument, but for this simple case, i went for <code>cond</code>.</p>
</div>
<div class="paragraph">
<p>Solving the second part of the puzzle was only a matter of having a predicate that checks for any value being „red“ in the map, and returning 0 instead of the sum of the values if it is found.</p>
</div>
<div class="paragraph">
<p>I could have refactored and put the predicate as a parameter to the value-summing function, but i resorted to doing copy-and-paste for the sake of this puzzle, directly inserting the predicate.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_going_on">going on…</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This was the first half of the Advent of Code 2015, but i will continue to solve all puzzles during the next days, and i hope there will be an Advent of Code 2016. I promise to not be that late to the party as i was this time. Thanks to <a href="http://was.tl/">Eric Wastl</a> for creating this great page and being so creative on the puzzles.</p>
</div>
</div>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2016/03/18/Advent-of-Code-Halftime-report.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2016/03/18/Advent-of-Code-Halftime-report.html</guid><category><![CDATA[clojure]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Fri, 18 Mar 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Bobkonf and :clojureD 2016]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This year again, <a href="http://www.bobkonf.de/2016/de/">Bobkonf</a> and <a href="http://www.clojured.de">:clojureD</a> made a back-to-back appearance on the 19th and 20th of February in Berlin and i was very happy to participate in both.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_bobkonf">BobKonf</h2>
<div class="sectionbody">
<div class="paragraph">
<p>On Friday at BobKonf i especially enjoyed the Clojure talk of <a href="https://twitter.com/michaelvitz">Michael Vitz</a> which is recorded <a href="https://www.innoq.com/en/talks/2016/02/clojure-webapps/">here</a>, and the „Specification by Example“ interactive workshop held by <a href="https://twitter.com/nicolerauch">Nicole Rauch</a>. This workshop first threw me into a very controversial mood, but after a slow start all the pieces fit together and i saw the big picture. These are the really valuable events, when you do not hear things that you already know and believe, but that overthrow some of the very beaten paths in the brain. Thanks for that!</p>
</div>
<div class="paragraph">
<p>Like last year, the event was well organized and the location was still suitable.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="__clojured">:clojureD</h2>
<div class="sectionbody">
<div class="paragraph">
<p>On Saturday it was Clojure-time! At <a href="http://www.clojured.de">:clojureD</a> the number of participants jumped to 180 this year, yielding a quite impressive group photo on the stairs of the Beuth Hochschule.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://pbs.twimg.com/media/CbprIrbW8AAL2pK.jpg" alt="Group Photo">
</div>
</div>
<div class="paragraph">
<p>Luckily, the second smaller lecture hall was changed to a bigger one this year, so everyone could find a seat.</p>
</div>
<div class="paragraph">
<p>The talks were great again, right from the start, <a href="https://twitter.com/toxi">Karsten Schmidt</a> blew us away with his <a href="https://www.youtube.com/watch?v=4w2kpSL68nM">keynote about creative uses of Clojure</a>. I am not a very creative or art-loving guy, but what he showed was really great. After that i attended talks about actor systems and Erlang (on a Clojure conference!). After the lunch break, i watched Joel Kuiper in his first talk at a programming conference <a href="https://www.instagram.com/p/BCAlmUkMU1O/">improvising on the black board</a> until the beamer worked again (Great job, Joel!). Wrapping up with experience reports about React Native, type systems and managing your dependencies (in the „DI” sense, not the „lein“ or „boot” sense), i left this wonderful conference. It is very affordable and has great content. I will return in 2017 for sure!</p>
</div>
</div>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2016/03/17/Bobkonf-and-clojureD-2016.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2016/03/17/Bobkonf-and-clojureD-2016.html</guid><category><![CDATA[clojure]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Thu, 17 Mar 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[:clojureD 2015]]></title><description><![CDATA[<div class="paragraph">
<p>On 2015-01-24, one day after and in cooperation with the <a href="http://www.bobkonf.de">BOB Konferenz</a>, there was the <a href="http://www.clojured.de/">:clojureD</a> conference in Berlin. It was held in the rooms of a university, offering one nice big auditorium, and another, much smaller room that reminded me of the physics room in high school. These rooms hosted the <a href="http://www.clojured.de/archive/2015/">two tracks</a> that were offered.</p>
</div>
<div class="paragraph">
<p>I started by watching the <a href="http://www.clojured.de/archive/2015/#details-10">nice talk</a> of <a href="https://twitter.com/iamdrowsy">Albrecht Schmidt</a> about his entry in the <a href="https://helloworldopen.com/">Hello World Open 2015</a> bot programming competition. Beside the general, high polished look of his slides, i especially liked that he recorded „live coding” as a screencast and embedded it into the slides. That was just the right balance between static code display (which is too boring) and real live coding, which is in general too error-prone and slow. So one could easily follow the gradual development of the components along the talk. I enjoyed that talk a lot.</p>
</div>
<div class="paragraph">
<p>The <a href="http://www.clojured.de/archive/2015/#details-8">next talk</a> for me was about <a href="https://github.com/Engelberg/instaparse">Instaparse</a>, given by <a href="https://twitter.com/stka23">Stefan Kamphausen</a> which i knew from his talk one day ago at the BOB Konferenz. So i knew i could expect a fresh and funny presentation, and I was not disappointed. He did the whole presentation from Emacs, with no slides at all.</p>
</div>
<div class="paragraph">
<p>After the lunch break, my track continued with <a href="http://www.clojured.de/archive/2015/#details-16">Michael Klishin talking</a> about the work of <a href="http://clojurewerkz.org/">ClojureWerkz</a>. He held his talk via Google Hangouts, but unfortunately, his slides suffered a lot from this way of presenting, they lacked some stuff, animations and the formatting went haywire. That was not his fault, but still it made the talk challenging to follow.</p>
</div>
<div class="paragraph">
<p>The <a href="http://www.clojured.de/archive/2015/#details-9">next talk</a> was about <a href="https://github.com/marick/Midje">Midje</a>, which i know already a bit, but still that talk had some interesting new insights.</p>
</div>
<div class="paragraph">
<p>It continued with <a href="http://www.clojured.de/archive/2015/#details-15">„Generative Testing: Properties, State and Beyond“</a> from <a href="https://twitter.com/janstepien">Jan Stępień</a>, also a speaker i already enjoyed the day before. Today he held that interesting talk about applying generative testing to real world scenarios, using <a href="https://github.com/clojure/test.check">test.check</a>. I already heard about generative testing, but my scepticism was high. It still is, but i saw cases in his talk where it really helps. Perhaps it is time to gather some own experience with it.</p>
</div>
<div class="paragraph">
<p>This track wrapped up with a <a href="http://www.clojured.de/archive/2015/#details-0">talk that compared three different libraries for logic programming by showing how each of them solves sudoku</a>. It was an interesting talk, but right now i see no need for me to apply logic programming anywhere. You could easily sense that the speaker is an university lecturer, as his style was very much like that. But he was still entertaining and (not unimportant so late in the day) enthusiastic about his topic.</p>
</div>
<div class="paragraph">
<p>The day concluded with four lightning talks of varying length, quality and topic. Reasoning about <a href="http://www.clojured.de/archive/2015/#details-18">time travel</a> and <a href="http://www.clojured.de/archive/2015/#details-3">putting Clojure in a bubble</a> were my favorites.</p>
</div>
<div class="paragraph">
<p>I enjoyed the conference very much and i hope to take part again in 2016!</p>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2015/02/13/clojureD-2015.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2015/02/13/clojureD-2015.html</guid><category><![CDATA[clojure]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Fri, 13 Feb 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[BOB Konferenz 2015]]></title><description><![CDATA[<div class="paragraph">
<p>On 2015-01-23 i attended <a href="http://bobkonf.de">BOB Konferenz 2015</a> in Berlin. BOB stands for <strong>„Best Of Breed“</strong> in modern software development, quite a mouthful. It was hosted by a company that makes medical software. For me, that was quite a unusual concept, being on a conference in the rooms of another company, but there was enough space und sufficient room for the tutorials. It offered a day with <a href="http://bobkonf.de/2015/programm.html">2 tracks of talks and 2.5 tracks of tutorials</a>. While also featuring <a href="http://www.erlang.org/">Erlang</a>, <a href="http://en.wikipedia.org/wiki/Swift_%28programming_language%29">Swift</a> and language-agnostic topics, one of the main pillars was functional programming and <a href="http://clojure.org/">Clojure</a>. Beside the keynote, i watched a <a href="http://bobkonf.de/2015/zuther.html">microservice-deployment related talk</a> and a <a href="http://bobkonf.de/2015/middelkoop.html">talk about workflows expressed in grammars</a> (which was way too academic and above my knowledge of grammar formalisms, unfortunately).</p>
</div>
<div class="paragraph">
<p>After the lunch break, i attended a <a href="http://bobkonf.de/2015/gilliar.html">tutorial on functional GUI programming in Clojure with Reagent</a>. More or less, this was 90% an introduction into Clojure only, with some display and short explanation of the <a href="http://holmsand.github.io/reagent/">Reagent</a> stuff at the very end when time ran out. I expected more from that tutorial, but it is always hard to get all participants to the same level of knowledge.</p>
</div>
<div class="paragraph">
<p>After coffee break, the last two talks where about <a href="http://bobkonf.de/2015/kamphausen.html">Clojures STM</a> and a nice talk about <a href="http://bobkonf.de/2015/stepien.html">using Clojure in serving content to mobile devices via an REST API</a>. I enjoyed both very much. That concluded the day, which left me undecided: Parts disappointed me, while other parts were very much worth their time. If there will be a BOB Konferenz 2016, i will have a look at the program and will decide then whether i take part again. Perhaps i should favor tutorials over talks. I think the knowledge gain can be bigger. In review, i should have taken the tutorial on Erlang, as i do not know much about it up to now.</p>
</div>
<div class="paragraph">
<p>The next day, i visited <a href="http://www.clojured.de">:clojureD</a>, the (english language) german Clojure conference in Berlin.</p>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2015/02/12/BOB-Konferenz-2015.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2015/02/12/BOB-Konferenz-2015.html</guid><category><![CDATA[clojure]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Thu, 12 Feb 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[The (not so) subtle Difference between map and doseq]]></title><description><![CDATA[<div class="paragraph">
<p>Recently, i did some easy reporting over CSV data using Clojure, and
for that i had to separate the lines and look up duplicate IDs by adding
new IDs to one <code>atom</code> and adding already seen ones to another <code>atom</code>.
At the end i wanted to print the contents of the <code>atom</code> of duplicates.</p>
</div>
<div class="paragraph">
<p>I read the CSV data using <a href="https://github.com/davidsantiago/clojure-csv"><code>clojure-csv</code></a> which gives me a vector of vectors
with the data of each line. Now i wanted to process each line separately.</p>
</div>
<div class="paragraph">
<p>Without much thinking, i used <code>map</code> to feed a function that worked on a single
line. The code looked like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-clojure" data-lang="clojure">(ns duplicates.core
  (:gen-class))

(require '[clojure-csv.core :as csv])

(def seen-ids (atom #{}))
(def duplicate-ids (atom #{}))

(defn update-ids [v]
 (let [id (nth v 1)]
    (if (contains? @seen-ids rid) (swap! duplicate-ids conj id))
    (swap! seen-ids conj id)))

(defn -main
  [&amp; args]
  (let [rawdata (slurp args)
        parseddata (rest (csv/parse-csv rawdata :delimiter \;))]
    (map update-ids parseddata))
  (println @duplicate-ids))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Unexpectedly, after applying <code>map</code>, my <code>atom</code> of duplicates was empty, although i knew there were duplicates.</p>
</div>
<div class="paragraph">
<p>After some thinking, i realized my function had not been called at all.
This is incredibly obvious when reading only the first few words of the <code>map</code> <a href="https://clojuredocs.org/clojure.core/map">function doc string</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>Returns a lazy sequence…</pre>
</div>
</div>
<div class="paragraph">
<p>A <strong>lazy</strong> sequence only gets evaluated when needed, that is when elements of the mapped collection are asked for. In my case that was not the case, the sequence <code>map</code> did create was discarded, as i was only interested in the <strong>side-effect</strong> of updating the <code>atom</code> <code>duplicate-ids</code>.</p>
</div>
<div class="paragraph">
<p>This is surely a beginners mistake, but still it took me a minute to realize that. Now, a solution was easy: Instead of using <code>map</code>, let&#8217;s use <a href="https://clojuredocs.org/clojure.core/doseq"><code>doseq</code></a> that calls the function in turn, executing all possible side effects und returning <code>nil</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-clojure" data-lang="clojure">(doseq [v parseddata] (update-ids v))</code></pre>
</div>
</div>
<div class="paragraph">
<p>And finally, i had the IDs of my duplicate data sets in my <code>atom</code>.
So always be sure not to step into that small trap of laziness.</p>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2015/02/06/The-not-so-subtle-Difference-between-map-and-doseq.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2015/02/06/The-not-so-subtle-Difference-between-map-and-doseq.html</guid><category><![CDATA[clojure]]></category><category><![CDATA[ beginner]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Fri, 06 Feb 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Calling variadic Java Functions from Clojure]]></title><description><![CDATA[<div class="sect1">
<h2 id="_tl_dr">tl;dr</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When calling variadic Java functions with <code>&lt;Type&gt;&#8230;&#8203;</code> somewhere in its signature, wrap these
arguments into <code>(into-array &lt;Type&gt; [argument1 argument2 …])</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_story">The Story</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Clojure makes Java interop easy. But recently i stumbled a little bit when i tried to call
a variadic (variable argument count) Java function. The function i had to call was
<code>public static String format(Locale l, String format, Object&#8230;&#8203; args)</code>. I know there is <a href="https://clojuredocs.org/clojure.core/format"><code>format</code></a>
in <code>(ns clojure.core)</code>, but it lacks the Locale support.</p>
</div>
<div class="paragraph">
<p>I tried the naive approach:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-clojure" data-lang="clojure">    (let [n         3.14159269
          locale    (java.util.Locale. "de")]
        (String/format locale "%2.1f" n))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Which fails miserably:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>ClassCastException java.lang.Double cannot be cast to [Ljava.lang.Object;  user/eval715</pre>
</div>
</div>
<div class="paragraph">
<p>The error message gives away how Java does variadic functions: <code>[L</code> is the type signature of an array.
<code>Object&#8230;&#8203;</code> is just syntactic sugar for <code>Object[]</code>. Arrays must be something like <code>vec</code> in Clojure, right?
Let&#8217;s try:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-clojure" data-lang="clojure">    (let [n         3.14159269
          locale    (java.util.Locale. "de")]
        (String/format locale "%2.1f" [n]))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Nope, no progress here:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>ClassCastException clojure.lang.PersistentVector cannot be cast to [Ljava.lang.Object;  user/eval717</pre>
</div>
</div>
<div class="paragraph">
<p>Luckily, there is the <a href="https://clojuredocs.org/clojure.core/into-array"><code>into-array</code></a> function in its <code>(into-array type aseq)</code> form that takes the type of the elements in the array instead of guessing them from the elements in <code>aseq</code>. Let&#8217;s try this one:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>user=&gt; (into-array Object [3.1415926])
#&lt;Object[] [Ljava.lang.Object;@4351451d&gt;</pre>
</div>
</div>
<div class="paragraph">
<p>That looks like the type signature we need. Now we can guess the right way to call <code>String/format</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-clojure" data-lang="clojure">    (let [n         3.14159269
          locale    (java.util.Locale. "de")]
    (String/format locale "%2.1f" (into-array Object [n])))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Yielding <code>"3,1"</code>. Finally there.</p>
</div>
</div>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2014/12/04/Calling-variadic-Java-Functions-from-Clojure.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2014/12/04/Calling-variadic-Java-Functions-from-Clojure.html</guid><category><![CDATA[clojure]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Thu, 04 Dec 2014 00:00:00 GMT</pubDate></item><item><title><![CDATA[Is Open Source Software inherently insecure?]]></title><description><![CDATA[<div class="paragraph">
<p>Recently, <a href="http://blog.fimsch.net">Konrad</a> wrote an <a href="http://blog.fimsch.net/2013/09/on-open-source-security/">article</a> about his thoughts that commercial software products may be more secure than (or at least as secure as) their open source counterparts, because software companies can afford to do serious testing, quality assurance and audits.</p>
</div>
<div class="paragraph">
<p>I am not quite with him: While these steps are helping to find security vulnerabilities, they are still closed by their nature. They are done by people selected and paid by the company whose products are under scrutiny. There is no open process or peer review. I even have to trust the company that they did the tests and audits at all. Basically, i have to trust them — and trust is often shattered in those days. What about intentional backdoors in their products? They easily pass their tests, and their audits will see but ignore them. Not good.</p>
</div>
<div class="paragraph">
<p>What makes open source products more secure for me is the pure possibility that someone from the community or academia takes them under scrutiny without asking for permission, without announcing beforehand, in an possibly open and peer-reviewable process.
Their might be backdoors or intentional security vulnerabilities in open source software that go unnoticed for some time, but every attacker should fear that he will be discovered and dragged into publicity. I trust this type of pressure more than promises of commercial software companies in the field of security.</p>
</div>
<div class="paragraph">
<p><a href="https://www.schneier.com/blog/archives/2013/09/how_to_remain_s.html">Bruce Schneier basically says the same</a> when he advises to stick to open source implementations of Standards instead of closed source proprietary. But still, <a href="http://jaxenter.de/artikel/Ich-bin-Open-Source-Entwickler-Trauen-Sie-mir">do not trust someone or something just because it comes from the domain of open source (german article)</a>. Just trust open, publicized, peer-reviewed audits from outside people.</p>
</div>
<div class="paragraph">
<p>And remember: There can be never 100% certainty. Like you can proof no physics theory "true", just test it in as many cases as possible, you can never be sure there are absolutely no backdoors or intentional security vulnerabilities in software.</p>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2013/10/08/Is-Open-Source-Software-inherently-insecure.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2013/10/08/Is-Open-Source-Software-inherently-insecure.html</guid><category><![CDATA[open source]]></category><category><![CDATA[ security]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Tue, 08 Oct 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[How to lure new contributors into your open source projects]]></title><description><![CDATA[<div class="sect1">
<h2 id="_tl_dr">tl;dr</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you want new people to contribute to your open source project, make it easy for them, not hard. Give them positive feedback and provide some guidance in your code base. Deliberately leave some easy to solve but less critical tasks for them to allow for achievable motivating success. Think gaming where you need an easy start to stick to the game before entering the hard, demanding levels.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_long_version">Long Version</h2>
<div class="sectionbody">
<div class="paragraph">
<p>At this years <a href="http://www.froscon.org">FrOSCon 8</a> <a href="http://isabel-drost-fromm.de/">Isabel Drost-Fromm</a> (also on (<a href="https://github.com/mainec">GitHub</a> and <a href="https://twitter.com/MaineC">Twitter</a>) held a talk labeled <a href="http://programm.froscon.org/2013/events/1208.html">„Talking people into creating patches“</a>. There were some maintainers of open source projects in the room, and many of them expressed they lack a sufficient number of contributors for their projects.</p>
</div>
<div class="paragraph">
<p>In the Q&amp;A session i took the microphone and shared my view of a willing, but mostly unsuccessful contributor to projects. My observations seemed to be received well by the audience, so i want to keep hold of them here:</p>
</div>
<div class="sect2">
<h3 id="_do_not_accidently_overlook_contributions">Do not accidently overlook contributions</h3>
<div class="paragraph">
<p>Put extra into effort into not accidently overlooking even small contributions, as this might frustrate the new contributors, driving them away from your project forever.</p>
</div>
<div class="paragraph">
<p>In a small project i once saw a nice, well done pull request on <a href="https://github.com/">GitHub</a> was left unanswered. Not rejected, not due for improvement, simply ignored. I needed that special feature in there for my own work, so i pressed the maintainer to take the pull request or i would fork his project and continue my work in my own fork. All in a sudden accepting the pull request was no problem. Do not do this, unless there is a real problem with the pull request. Explain why.</p>
</div>
</div>
<div class="sect2">
<h3 id="_do_not_use_the_issue_tracker_as_your_personal_todo_list_it_is_public">Do not use the issue tracker as your personal ToDo-list — it is public!</h3>
<div class="paragraph">
<p>Especially in projects with a small and closed group of contributors, often the public issue list looks like a personal ToDo-list for the guy that wrote the issue: just the subject line, no details, no context and no clear goal understandable to someone getting freshly into the project. Always write your issues such that anyone (not only you) can understand what should be done, and perhaps even what should be the preferred way to solve the issue. Writing good issue descriptions needs more knowledge of the code than resolving such a well-written issue, and in bad cases, may take as much time.</p>
</div>
</div>
<div class="sect2">
<h3 id="_deliberately_keep_some_low_hanging_fruit_for_the_newcomers">Deliberately keep some low hanging fruit for the newcomers</h3>
<div class="paragraph">
<p>Keep some easy, manageable tasks for the new guys in your open issues, even if you as an experienced guy could do them in minutes. Best for that are the non-critical tasks with a clear scope. These can be the breadcrumbs that build self confidence in your new contributor and motivate them to tackle the harder tasks while they follow you into the thicket of your code base. You as the experienced core developer should crack the hard nuts in your issue tracker, not the trivial ones.</p>
</div>
</div>
<div class="sect2">
<h3 id="_write_some_high_level_guide_describing_the_structure_of_your_project">Write some high-level-guide describing the structure of your project</h3>
<div class="paragraph">
<p>If your code base structure exceeds triviality (which it quickly does, especially with Java projects), provide new contributors a high-level overview over your code structure and architecture (every piece of software has an architecture, whether you are aware of it or not). Think of it as an <code>README</code> not for the user of but for the contributor to your project. Make them comfortable with some of the previously unwritten rules in your project <strong>before</strong> problems arise, and</p>
</div>
</div>
</div>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2013/08/27/How-to-lure-new-contributors-into-your-open-source-projects.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2013/08/27/How-to-lure-new-contributors-into-your-open-source-projects.html</guid><category><![CDATA[open-source]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Tue, 27 Aug 2013 00:00:00 GMT</pubDate></item></channel></rss>