<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Dr. Stefan Pfeiffer]]></title><description><![CDATA[All Things Programming - mostly functional!]]></description><link>http://www.stefan-pfeiffer.de</link><generator>RSS for Node</generator><lastBuildDate>Fri, 22 Jul 2016 20:48:15 GMT</lastBuildDate><atom:link href="http://www.stefan-pfeiffer.de/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[The (not so) subtle Difference between map and doseq]]></title><description><![CDATA[<div class="paragraph">
<p>Recently, i did some easy reporting over CSV data using Clojure, and
for that i had to separate the lines and look up duplicate IDs by adding
new IDs to one <code>atom</code> and adding already seen ones to another <code>atom</code>.
At the end i wanted to print the contents of the <code>atom</code> of duplicates.</p>
</div>
<div class="paragraph">
<p>I read the CSV data using <a href="https://github.com/davidsantiago/clojure-csv"><code>clojure-csv</code></a> which gives me a vector of vectors
with the data of each line. Now i wanted to process each line separately.</p>
</div>
<div class="paragraph">
<p>Without much thinking, i used <code>map</code> to feed a function that worked on a single
line. The code looked like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-clojure" data-lang="clojure">(ns duplicates.core
  (:gen-class))

(require '[clojure-csv.core :as csv])

(def seen-ids (atom #{}))
(def duplicate-ids (atom #{}))

(defn update-ids [v]
 (let [id (nth v 1)]
    (if (contains? @seen-ids rid) (swap! duplicate-ids conj id))
    (swap! seen-ids conj id)))

(defn -main
  [&amp; args]
  (let [rawdata (slurp args)
        parseddata (rest (csv/parse-csv rawdata :delimiter \;))]
    (map update-ids parseddata))
  (println @duplicate-ids))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Unexpectedly, after applying <code>map</code>, my <code>atom</code> of duplicates was empty, although i knew there were duplicates.</p>
</div>
<div class="paragraph">
<p>After some thinking, i realized my function had not been called at all.
This is incredibly obvious when reading only the first few words of the <code>map</code> <a href="https://clojuredocs.org/clojure.core/map">function doc string</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>Returns a lazy sequence…</pre>
</div>
</div>
<div class="paragraph">
<p>A <strong>lazy</strong> sequence only gets evaluated when needed, that is when elements of the mapped collection are asked for. In my case that was not the case, the sequence <code>map</code> did create was discarded, as i was only interested in the <strong>side-effect</strong> of updating the <code>atom</code> <code>duplicate-ids</code>.</p>
</div>
<div class="paragraph">
<p>This is surely a beginners mistake, but still it took me a minute to realize that. Now, a solution was easy: Instead of using <code>map</code>, let&#8217;s use <a href="https://clojuredocs.org/clojure.core/doseq"><code>doseq</code></a> that calls the function in turn, executing all possible side effects und returning <code>nil</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-clojure" data-lang="clojure">(doseq [v parseddata] (update-ids v))</code></pre>
</div>
</div>
<div class="paragraph">
<p>And finally, i had the IDs of my duplicate data sets in my <code>atom</code>.
So always be sure not to step into that small trap of laziness.</p>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2015/02/06/The-not-so-subtle-Difference-between-map-and-doseq.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2015/02/06/The-not-so-subtle-Difference-between-map-and-doseq.html</guid><category><![CDATA[clojure]]></category><category><![CDATA[ beginner]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Fri, 06 Feb 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Calling variadic Java Functions from Clojure]]></title><description><![CDATA[<div class="sect1">
<h2 id="_tl_dr">tl;dr</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When calling variadic Java functions with <code>&lt;Type&gt;&#8230;&#8203;</code> somewhere in its signature, wrap these
arguments into <code>(into-array &lt;Type&gt; [argument1 argument2 …])</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_story">The Story</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Clojure makes Java interop easy. But recently i stumbled a little bit when i tried to call
a variadic (variable argument count) Java function. The function i had to call was
<code>public static String format(Locale l, String format, Object&#8230;&#8203; args)</code>. I know there is <a href="https://clojuredocs.org/clojure.core/format"><code>format</code></a>
in <code>(ns clojure.core)</code>, but it lacks the Locale support.</p>
</div>
<div class="paragraph">
<p>I tried the naive approach:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-clojure" data-lang="clojure">    (let [n         3.14159269
          locale    (java.util.Locale. "de")]
        (String/format locale "%2.1f" n))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Which fails miserably:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>ClassCastException java.lang.Double cannot be cast to [Ljava.lang.Object;  user/eval715</pre>
</div>
</div>
<div class="paragraph">
<p>The error message gives away how Java does variadic functions: <code>[L</code> is the type signature of an array.
<code>Object&#8230;&#8203;</code> is just syntactic sugar for <code>Object[]</code>. Arrays must be something like <code>vec</code> in Clojure, right?
Let&#8217;s try:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-clojure" data-lang="clojure">    (let [n         3.14159269
          locale    (java.util.Locale. "de")]
        (String/format locale "%2.1f" [n]))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Nope, no progress here:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>ClassCastException clojure.lang.PersistentVector cannot be cast to [Ljava.lang.Object;  user/eval717</pre>
</div>
</div>
<div class="paragraph">
<p>Luckily, there is the <a href="https://clojuredocs.org/clojure.core/into-array"><code>into-array</code></a> function in its <code>(into-array type aseq)</code> form that takes the type of the elements in the array instead of guessing them from the elements in <code>aseq</code>. Let&#8217;s try this one:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>user=&gt; (into-array Object [3.1415926])
#&lt;Object[] [Ljava.lang.Object;@4351451d&gt;</pre>
</div>
</div>
<div class="paragraph">
<p>That looks like the type signature we need. Now we can guess the right way to call <code>String/format</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-clojure" data-lang="clojure">    (let [n         3.14159269
          locale    (java.util.Locale. "de")]
    (String/format locale "%2.1f" (into-array Object [n])))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Yielding <code>"3,1"</code>. Finally there.</p>
</div>
</div>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2014/12/04/Calling-variadic-Java-Functions-from-Clojure.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2014/12/04/Calling-variadic-Java-Functions-from-Clojure.html</guid><category><![CDATA[clojure]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Thu, 04 Dec 2014 00:00:00 GMT</pubDate></item><item><title><![CDATA[Is Open Source Software inherently insecure?]]></title><description><![CDATA[<div class="paragraph">
<p>Recently, <a href="http://blog.fimsch.net">Konrad</a> wrote an <a href="http://blog.fimsch.net/2013/09/on-open-source-security/">article</a> about his thoughts that commercial software products may be more secure than (or at least as secure as) their open source counterparts, because software companies can afford to do serious testing, quality assurance and audits.</p>
</div>
<div class="paragraph">
<p>I am not quite with him: While these steps are helping to find security vulnerabilities, they are still closed by their nature. They are done by people selected and paid by the company whose products are under scrutiny. There is no open process or peer review. I even have to trust the company that they did the tests and audits at all. Basically, i have to trust them — and trust is often shattered in those days. What about intentional backdoors in their products? They easily pass their tests, and their audits will see but ignore them. Not good.</p>
</div>
<div class="paragraph">
<p>What makes open source products more secure for me is the pure possibility that someone from the community or academia takes them under scrutiny without asking for permission, without announcing beforehand, in an possibly open and peer-reviewable process.
Their might be backdoors or intentional security vulnerabilities in open source software that go unnoticed for some time, but every attacker should fear that he will be discovered and dragged into publicity. I trust this type of pressure more than promises of commercial software companies in the field of security.</p>
</div>
<div class="paragraph">
<p><a href="https://www.schneier.com/blog/archives/2013/09/how_to_remain_s.html">Bruce Schneier basically says the same</a> when he advises to stick to open source implementations of Standards instead of closed source proprietary. But still, <a href="http://jaxenter.de/artikel/Ich-bin-Open-Source-Entwickler-Trauen-Sie-mir">do not trust someone or something just because it comes from the domain of open source (german article)</a>. Just trust open, publicized, peer-reviewed audits from outside people.</p>
</div>
<div class="paragraph">
<p>And remember: There can be never 100% certainty. Like you can proof no physics theory "true", just test it in as many cases as possible, you can never be sure there are absolutely no backdoors or intentional security vulnerabilities in software.</p>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2013/10/08/Is-Open-Source-Software-inherently-insecure.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2013/10/08/Is-Open-Source-Software-inherently-insecure.html</guid><category><![CDATA[open source]]></category><category><![CDATA[ security]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Tue, 08 Oct 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[How to lure new contributors into your open source projects]]></title><description><![CDATA[<div class="sect1">
<h2 id="_tl_dr">tl;dr</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you want new people to contribute to your open source project, make it easy for them, not hard. Give them positive feedback and provide some guidance in your code base. Deliberately leave some easy to solve but less critical tasks for them to allow for achievable motivating success. Think gaming where you need an easy start to stick to the game before entering the hard, demanding levels.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_long_version">Long Version</h2>
<div class="sectionbody">
<div class="paragraph">
<p>At this years <a href="http://www.froscon.org">FrOSCon 8</a> <a href="http://isabel-drost-fromm.de/">Isabel Drost-Fromm</a> (also on (<a href="https://github.com/mainec">GitHub</a> and <a href="https://twitter.com/MaineC">Twitter</a>) held a talk labeled <a href="http://programm.froscon.org/2013/events/1208.html">„Talking people into creating patches“</a>. There were some maintainers of open source projects in the room, and many of them expressed they lack a sufficient number of contributors for their projects.</p>
</div>
<div class="paragraph">
<p>In the Q&amp;A session i took the microphone and shared my view of a willing, but mostly unsuccessful contributor to projects. My observations seemed to be received well by the audience, so i want to keep hold of them here:</p>
</div>
<div class="sect2">
<h3 id="_do_not_accidently_overlook_contributions">Do not accidently overlook contributions</h3>
<div class="paragraph">
<p>Put extra into effort into not accidently overlooking even small contributions, as this might frustrate the new contributors, driving them away from your project forever.</p>
</div>
<div class="paragraph">
<p>In a small project i once saw a nice, well done pull request on <a href="https://github.com/">GitHub</a> was left unanswered. Not rejected, not due for improvement, simply ignored. I needed that special feature in there for my own work, so i pressed the maintainer to take the pull request or i would fork his project and continue my work in my own fork. All in a sudden accepting the pull request was no problem. Do not do this, unless there is a real problem with the pull request. Explain why.</p>
</div>
</div>
<div class="sect2">
<h3 id="_do_not_use_the_issue_tracker_as_your_personal_todo_list_it_is_public">Do not use the issue tracker as your personal ToDo-list — it is public!</h3>
<div class="paragraph">
<p>Especially in projects with a small and closed group of contributors, often the public issue list looks like a personal ToDo-list for the guy that wrote the issue: just the subject line, no details, no context and no clear goal understandable to someone getting freshly into the project. Always write your issues such that anyone (not only you) can understand what should be done, and perhaps even what should be the preferred way to solve the issue. Writing good issue descriptions needs more knowledge of the code than resolving such a well-written issue, and in bad cases, may take as much time.</p>
</div>
</div>
<div class="sect2">
<h3 id="_deliberately_keep_some_low_hanging_fruit_for_the_newcomers">Deliberately keep some low hanging fruit for the newcomers</h3>
<div class="paragraph">
<p>Keep some easy, manageable tasks for the new guys in your open issues, even if you as an experienced guy could do them in minutes. Best for that are the non-critical tasks with a clear scope. These can be the breadcrumbs that build self confidence in your new contributor and motivate them to tackle the harder tasks while they follow you into the thicket of your code base. You as the experienced core developer should crack the hard nuts in your issue tracker, not the trivial ones.</p>
</div>
</div>
<div class="sect2">
<h3 id="_write_some_high_level_guide_describing_the_structure_of_your_project">Write some high-level-guide describing the structure of your project</h3>
<div class="paragraph">
<p>If your code base structure exceeds triviality (which it quickly does, especially with Java projects), provide new contributors a high-level overview over your code structure and architecture (every piece of software has an architecture, whether you are aware of it or not). Think of it as an <code>README</code> not for the user of but for the contributor to your project. Make them comfortable with some of the previously unwritten rules in your project <strong>before</strong> problems arise, and</p>
</div>
</div>
</div>
</div>]]></description><link>http://www.stefan-pfeiffer.de/2013/08/27/How-to-lure-new-contributors-into-your-open-source-projects.html</link><guid isPermaLink="true">http://www.stefan-pfeiffer.de/2013/08/27/How-to-lure-new-contributors-into-your-open-source-projects.html</guid><category><![CDATA[open-source]]></category><dc:creator><![CDATA[Stefan Pfeiffer]]></dc:creator><pubDate>Tue, 27 Aug 2013 00:00:00 GMT</pubDate></item></channel></rss>